services:
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-null}
      POSTGRES_DB: ticketsbot
    # ports:  # Uncomment this line and the following line to access the main postgres on port 5433
    #   - "5433:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "psql -U postgres -d ticketsbot -t -c \"SELECT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'whitelabel_users');\" | grep -q 't'"]
      interval: 10s
      timeout: 5s
      retries: 10
  
  postgres-cache:
    image: postgres:15
    container_name: postgres-cache
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${CACHE_DATABASE_PASSWORD:-null}
      POSTGRES_DB: botcache
    # ports: # Uncomment this line and the following line to access the cache postgres on port 5434
    #   - "5434:5432"
    volumes:
      - ./pgcachedata:/var/lib/postgresql/data
      - ./init-cache.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "psql -U postgres -d botcache -c 'SELECT 1' > /dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  postgres-archive:
    image: postgres:15
    container_name: postgres-archive
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${ARCHIVE_DATABASE_PASSWORD:-null}
      POSTGRES_DB: archive
    # ports: # Uncomment this line and the following line to access the archive postgres on port 5435
    #   - "5435:5432"
    volumes:
      - ./pgarchivedata:/var/lib/postgresql/data
      - ./init-archive.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "psql -U postgres -d archive -c 'SELECT 1' > /dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka:
    image: apache/kafka:latest
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - app-network

  redis:
    image: redis:7
    container_name: redis
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD:-null}"]
    # ports: # Uncomment this line and the following line to access redis on port 6479
    #   - "6479:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD:-null} ping | grep PONG"]
      interval: 10s
      timeout: 3s
      retries: 5

  statsd:
    image: ${STATSD_IMAGE:-ghcr.io/statsd/statsd:v0.10.2}
    networks:
      - app-network

  http-proxy:
    image: ${HTTP_PROXY_IMAGE:-ghcr.io/rxdn/http-proxy:metrics}
    container_name: http-proxy
    environment:
      DISCORD_TOKEN: ${DISCORD_BOT_TOKEN}
    networks:
      - app-network

  worker-interactions:
    image: ${WORKER_IMAGE:-ghcr.io/ticketsbot-cloud/worker:v2.8.0}
    container_name: worker-interactions
    restart: on-failure:10
    # ports:
    #   - "6061:6060" # pprof port
    environment:
      WORKER_MODE: INTERACTIONS

      DASHBOARD_URL: ${DASHBOARD_URL:-http://localhost:5000}
      FRONTPAGE_URL: ${LANDING_PAGE_URL:-https://ticketsbot.net}
      VOTE_URL: ${VOTE_URL:-https://vote.ticketsbot.net}
      POWEREDBY: ${POWERED_BY:-github.com/ticketsbot}
      ICON_URL: ${ICON_URL:-https://ticketsbot.net/assets/icon.png}

      WORKER_PUBLIC_TOKEN: ${DISCORD_BOT_PUBLIC_KEY}
      WORKER_PUBLIC_ID: ${DISCORD_BOT_CLIENT_ID}
      WORKER_BOT_ADMINS: ${ADMIN_USER_IDS}
      WORKER_BOT_HELPERS: ${HELPER_USER_IDS:-}
      SUPPORT_SERVER_INVITE: ${DISCORD_SUPPORT_SERVER_INVITE:-https://discord.gg/ticketsbot}
      HTTP_ADDR: 0.0.0.0:4001
      DISCORD_PROXY_URL: http-proxy:80 # http://{proxy_url}/{discord's api path ex: api/v10/webhooks/...}

      WORKER_ARCHIVER_URL: http://logarchiver:4000
      WORKER_ARCHIVER_AES_KEY: ${ARCHIVER_AES_KEY}

      DATABASE_HOST: ${DATABASE_HOST:-postgres:5432}
      DATABASE_NAME: ticketsbot
      DATABASE_USER: postgres
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-null}
      DATABASE_THREADS: 4

      CACHE_HOST: ${CACHE_DATABASE_HOST:-postgres-cache:5432}
      CACHE_NAME: botcache
      CACHE_USER: postgres
      CACHE_PASSWORD: ${CACHE_DATABASE_PASSWORD:-null}
      CACHE_THREADS: 4

      WORKER_REDIS_ADDR: ${REDIS_ADDR:-redis:6379}
      WORKER_REDIS_PASSWD: ${REDIS_PASSWORD:-null}
      WORKER_REDIS_THREADS: 4

      KAFKA_BROKERS: kafka:9092
      KAFKA_EVENTS_TOPIC: ticketsbot
      KAFKA_GOROUTINE_LIMIT: 1000
      
      WORKER_STATSD_ADDR: statsd:8125
      WORKER_STATSD_PREFIX: ticketsbot

      WORKER_SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      postgres-cache:
        condition: service_healthy
      # sharder-main:
      #   condition: service_healthy
    networks:
      - app-network

  worker-gateway:
    image: ${WORKER_IMAGE:-ghcr.io/ticketsbot-cloud/worker:v2.8.0}
    container_name: worker-gateway
    restart: on-failure:10
    # ports:
      # - "6062:6060" # pprof port
    environment:
      # WORKER_DEBUG: 
      WORKER_MODE: GATEWAY

      DASHBOARD_URL: ${DASHBOARD_URL:-http://localhost:5000}
      FRONTPAGE_URL: ${LANDING_PAGE_URL:-https://ticketsbot.net}
      VOTE_URL: ${VOTE_URL:-https://vote.ticketsbot.net}
      POWEREDBY: ${POWERED_BY:-github.com/ticketsbot}
      ICON_URL: ${ICON_URL:-https://ticketsbot.net/assets/icon.png}

      WORKER_PUBLIC_TOKEN: ${DISCORD_BOT_PUBLIC_KEY}
      WORKER_PUBLIC_ID: ${DISCORD_BOT_CLIENT_ID}
      SUPPORT_SERVER_INVITE: ${DISCORD_SUPPORT_SERVER_INVITE}
      HTTP_ADDR: 0.0.0.0:4001
      DISCORD_PROXY_URL: http-proxy:80

      DATABASE_HOST: ${DATABASE_HOST:-postgres:5432}
      DATABASE_NAME: ticketsbot
      DATABASE_USER: postgres
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-null}
      DATABASE_THREADS: 4

      CACHE_HOST: ${CACHE_DATABASE_HOST:-postgres-cache:5432}
      CACHE_NAME: botcache
      CACHE_USER: postgres
      CACHE_PASSWORD: ${CACHE_DATABASE_PASSWORD:-null}
      CACHE_THREADS: 4

      WORKER_REDIS_ADDR: ${REDIS_ADDR:-redis:6379}
      WORKER_REDIS_PASSWD: ${REDIS_PASSWORD:-null}
      WORKER_REDIS_THREADS: 4

      KAFKA_BROKERS: kafka:9092
      KAFKA_EVENTS_TOPIC: ticketsbot
      KAFKA_GOROUTINE_LIMIT: 1000

      WORKER_STATSD_ADDR: statsd:8125
      WORKER_STATSD_PREFIX: ticketsbot

      WORKER_SENTRY_DSN: ${SENTRY_DSN}
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      postgres-cache:
        condition: service_healthy
    networks:
      - app-network

  http-gateway:
    image: ${HTTP_GATEWAY_IMAGE:-ghcr.io/ticketsbot/http-gateway:b0748cc2e964eb1fcb658565844a50a6182489cf}
    container_name: http-gateway
    restart: on-failure:3
    ports:
      - "8080:4000"
    environment:
      RUST_LOG: trace
      server_addr: 0.0.0.0:4000
      public_bot_id: ${DISCORD_BOT_CLIENT_ID}
      public_token: ${DISCORD_BOT_TOKEN}
      public_public_key: ${DISCORD_BOT_PUBLIC_KEY}

      database_uri: postgres://postgres:${DATABASE_PASSWORD:-null}@${DATABASE_HOST:-postgres:5432}/ticketsbot
      database_threads: 4

      cache_uri: postgres://postgres:${CACHE_DATABASE_PASSWORD:-null}@${CACHE_DATABASE_HOST:-postgres-cache:5432}/botcache
      cache_threads: 4

      worker_svc_uri: worker-interactions:4001 # becomes: http://{svc_uri}/interactions
      shard_count: 1
    depends_on:
      postgres:
        condition: service_healthy
      postgres-cache:
        condition: service_healthy
    networks:
      - app-network

  sharder-main:
    image: ${SHADER_IMAGE:-ghcr.io/ticketsbot/main-sharder:a4bf4a98848094435d017d90c2cfc09a04146ef3}
    container_name: sharder-main
    hostname: sharder-0
    ports:
      - "8092:8091"
    environment:
      RUST_LOG: trace
      # sharder_id: 0 # this is automatically set by the dash from the hostname
      sharder_total: 1

      redis_addr: ${REDIS_ADDR:-redis:6379}
      redis_password: ${REDIS_PASSWORD:-null}
      redis_threads: 2

      metrics_addr: 0.0.0.0:8091
      sentry_dsn: ${SENTRY_DSN}
      worker_svc_uri: worker-gateway:4001

      kafka_brokers: kafka:9092
      kafka_topic: ticketsbot

      large_sharding_buckets: 1
      sharder_token: ${DISCORD_BOT_TOKEN}
      sharder_cluster_size: 1
      bot_id: ${DISCORD_BOT_CLIENT_ID}
    depends_on:
      postgres:
        condition: service_healthy
      postgres-cache:
        condition: service_healthy
    networks:
      - app-network

  cachesync:
    image: ${CACHESYNC_IMAGE:-ghcr.io/ticketsbot/cache-sync-service:a4bf4a98848094435d017d90c2cfc09a04146ef3}
    restart: on-failure:3
    # ports:
    #   - '8091:8091' # metrics port
    environment:
      RUST_LOG: trace
      workers: 1
      batch_size: 100
      brokers: kafka:9092
      group_id: 1
      topic: ticketsbot
      postgres_uri: 'postgres://postgres:${CACHE_DATABASE_PASSWORD:-null}@${CACHE_DATABASE_HOST:-postgres-cache:5432}/botcache'
      metric_server_addr: '0.0.0.0:8091'
    depends_on:
      postgres-cache:
        condition: service_healthy
      sharder-main:
        condition: service_started
    networks:
      - app-network
  
  api:
    image: ${API_IMAGE:-ghcr.io/ticketsbot/api:07943c2e1a9b8788d030b4b19db3e656513b6481}
    restart: on-failure:10
    ports:
      - '8082:8081'
    environment:
      SERVER_ADDR: 0.0.0.0:8081
      BASE_URL: ${DASHBOARD_URL:-http://localhost:5000}
      MAIN_SITE: ${LANDING_PAGE_URL:-https://ticketsbot.net} # Home/Landing (used for /premium)
      DATABASE_URI: 'postgres://postgres:${DATABASE_PASSWORD:-null}@postgres/ticketsbot'
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-null}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_THREADS: 2
      RATELIMIT_WINDOW: 10
      RATELIMIT_MAX: 10
      RealIpHeaders: ${REAL_IP_HEADERS:-X-Forwarded-For}
      TRUSTED_PROXIES: ${TRUSTED_PROXIES:-127.0.0.1,172.21.0.1}
      JWT_SECRET: ${JWT_SECRET}
      OAUTH_ID: ${DISCORD_BOT_CLIENT_ID}
      OAUTH_SECRET: '${DISCORD_BOT_OAUTH_SECRET}'
      OAUTH_REDIRECT_URI: '${DASHBOARD_URL:-http://localhost:5000}/callback'
      BOT_ID: ${DISCORD_BOT_CLIENT_ID}
      BOT_TOKEN: '${DISCORD_BOT_TOKEN}'
      CACHE_URI: postgres://postgres:${CACHE_DATABASE_PASSWORD:-null}@postgres-cache/botcache
      # Optional?
      DISCORD_PROXY_URL: http-proxy:80
      METRIC_SERVER_ADDR: 0.0.0.0:8091
      ADMINS: ${ADMIN_USER_IDS}
      SENTRY_DSN: ${SENTRY_DSN}
      LOG_ARCHIVER_URL: http://logarchiver:4000
      LOG_AES_KEY: ${ARCHIVER_AES_KEY}
      RENDER_SERVICE_URL: http://discord-chat-replica:8080
      # PREMIUM_PROXY_URL
      # PREMIUM_PROXY_KEY
      # SESSION_DB_THREADS
      # SESSION_SECRET
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  dashboard:
    build:
      dockerfile: './dashboard.Dockerfile'
      args:
        CLIENT_ID: ${DISCORD_BOT_CLIENT_ID}
        REDIRECT_URI: ${DASHBOARD_URL:-http://localhost:5000}/callback 
        API_URL: ${API_URL:-http://localhost:8082}
        WS_URL: ${API_URL:-http://localhost:8082}
    ports:
      - '5000:5000'

  logarchiver:
    image: ${LOGARCHIVER_IMAGE:-ghcr.io/ticketsbot/logarchiver:0cfab8ec82cfaa88af9e6fabe4dd9a407f7537dd}
    environment:
      ARCHIVER_ADDR: 0.0.0.0:4000
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_ACCESS: ${S3_ACCESS}
      S3_SECRET: ${S3_SECRET}
      DEFAULT_BUCKET_ID: b77cc1a0-91ec-4d64-bb6d-21717737ea3c
      SENTRY_DSN: "${SENTRY_DSN}"
      PRODUCTION_MODE: true
      ADMIN_AUTH_TOKEN: ${ARCHIVER_ADMIN_AUTH_TOKEN}
      DATABASE_URI: postgres://postgres:${ARCHIVE_DATABASE_PASSWORD:-null}@${ARCHIVE_DATABASE_HOST:-postgres-archive:5432}/archive
    networks:
      - app-network
    depends_on:
      postgres-archive:
        condition: service_healthy

  autoclosedaemon:
    image: ${AUTOCLOSEDAEMOON_IMAGE:-ghcr.io/ticketsbot/autoclosedaemon:68cb9a641e9536dd45378d9fe0a085902f99914c}
    environment:
      DATABASE_URI: postgres://postgres:${DATABASE_PASSWORD:-null}@${DATABASE_HOST:-postgres:5432}/ticketsbot
      DATABASE_THREADS: 4
      CACHE_URI: postgres://postgres:${CACHE_DATABASE_PASSWORD:-null}@postgres-cache/botcache
      CACHE_THREADS: 4
      REDIS_ADDR: ${REDIS_ADDR:-redis:6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-null}
      REDIS_THREADS: 4
      SENTRY_DSN: ${SENTRY_DSN}
      SWEEP_TIME: ${SWEEP_TIME:-10}
      BOT_TOKEN: ${DISCORD_BOT_TOKEN}
      PRODUCTION_MODE: true
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy

  discord-chat-replica:
    image: ${DISCORD_CHAT_REPLICA_IMAGE:-ghcr.io/ticketsbot/discord-chat-replica:e7a42bfeb763b08d859f8a17430f5a38eb5d69a9}
    environment:
      PORT: 8080
    networks:
      - app-network


networks:
  app-network:
    driver: bridge
